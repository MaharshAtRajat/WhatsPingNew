{"ast":null,"code":"var _jsxFileName = \"/Users/maharshshah/Documents/THEPROJ/client/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../utils/supabase';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check active sessions and sets the user\n    const getInitialSession = async () => {\n      try {\n        var _session$user;\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) throw error;\n        setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      } catch (error) {\n        console.error('Error getting initial session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getInitialSession();\n\n    // Listen for changes on auth state (sign in, sign out, etc.)\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      var _session$user2;\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      navigate('/dashboard');\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  };\n  const signUp = async (email, password) => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (error) throw error;\n      navigate('/dashboard');\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  };\n  const signOut = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      navigate('/');\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"lk6viekuCMMpYORkLYLEq0Wsfds=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","useNavigate","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","getInitialSession","_session$user","data","session","error","auth","getSession","console","subscription","onAuthStateChange","_event","_session$user2","unsubscribe","signIn","email","password","signInWithPassword","Error","message","signUp","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/maharshshah/Documents/THEPROJ/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../utils/supabase';\nimport { useNavigate } from 'react-router-dom';\n\ninterface AuthContextType {\n  user: any;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Check active sessions and sets the user\n    const getInitialSession = async () => {\n      try {\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (error) throw error;\n        setUser(session?.user ?? null);\n      } catch (error) {\n        console.error('Error getting initial session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getInitialSession();\n\n    // Listen for changes on auth state (sign in, sign out, etc.)\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const { error } = await supabase.auth.signInWithPassword({ email, password });\n      if (error) throw error;\n      navigate('/dashboard');\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  };\n\n  const signUp = async (email: string, password: string) => {\n    try {\n      const { error } = await supabase.auth.signUp({ email, password });\n      if (error) throw error;\n      navigate('/dashboard');\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      navigate('/');\n    } catch (error: any) {\n      throw new Error(error.message);\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}